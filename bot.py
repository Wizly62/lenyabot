import os
import telebot
from telebot import types
import sqlite3
from datetime import datetime
import threading
import logging
import time
from functools import lru_cache

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('psychology_bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = '7396024719:AAG8nWMTOMvbyJCorRLfdaTkyoBufjPwsv0'
bot = telebot.TeleBot(BOT_TOKEN)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
class Database:
    def __init__(self):
        self.conn = sqlite3.connect('psychology.db', check_same_thread=False)
        self.conn.row_factory = sqlite3.Row
        self.cursor = self.conn.cursor()
        self.init_db()

    def init_db(self):
        self.cursor.execute('''CREATE TABLE IF NOT EXISTS users (
                                user_id INTEGER PRIMARY KEY,
                                username TEXT,
                                first_name TEXT,
                                last_name TEXT,
                                register_date TEXT)''')

        self.cursor.execute('''CREATE TABLE IF NOT EXISTS test_results (
                                id INTEGER PRIMARY KEY AUTOINCREMENT,
                                user_id INTEGER,
                                test_name TEXT,
                                score INTEGER,
                                result TEXT,
                                interpretation TEXT,
                                test_date TEXT)''')

        self.conn.commit()

    def add_user(self, user):
        self.cursor.execute('''INSERT OR IGNORE INTO users (user_id, username, first_name, last_name, register_date)
                               VALUES (?, ?, ?, ?, ?)''',
                            (user.id, user.username, user.first_name, user.last_name, datetime.now().strftime('%Y-%m-%d %H:%M:%S')))
        self.conn.commit()

    def get_user(self, user_id):
        self.cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
        return self.cursor.fetchone()

    def save_result(self, user_id, test_name, score, result, interpretation):
        self.cursor.execute('''INSERT INTO test_results (user_id, test_name, score, result, interpretation, test_date)
                               VALUES (?, ?, ?, ?, ?, ?)''',
                            (user_id, test_name, score, result, interpretation, datetime.now().strftime('%Y-%m-%d %H:%M:%S')))
        self.conn.commit()

    def get_results(self, user_id):
        self.cursor.execute('''SELECT test_name, result, interpretation, test_date FROM test_results
                               WHERE user_id = ? ORDER BY test_date DESC''', (user_id,))
        return self.cursor.fetchall()

db = Database()

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫—ç—à
user_tests = {}

# –¢–µ—Å—Ç—ã
TESTS = {
    "–¢–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç": {
        "description": "–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Å–≤–æ–π —Ç–∏–ø —Ç–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç–∞ –ø–æ –ê–π–∑–µ–Ω–∫—É.",
        "questions": [
            "–í—ã —á–∞—Å—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ö–æ—Ä–æ—à–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏?",
            "–í—ã –ª–µ–≥–∫–æ –∑–Ω–∞–∫–æ–º–∏—Ç–µ—Å—å —Å –ª—é–¥—å–º–∏?",
            "–í—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –±—ã—Å—Ç—Ä–æ, —á–µ–º –¥–æ–ª–≥–æ —Ä–∞–∑–¥—É–º—ã–≤–∞—Ç—å?",
            "–í—ã –ª—é–±–∏—Ç–µ –±—ã—Ç—å –≤ —Ü–µ–Ω—Ç—Ä–µ –≤–Ω–∏–º–∞–Ω–∏—è?",
            "–í—ã –±—ã—Å—Ç—Ä–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç–µ—Å—å –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–∏?"
        ],
        "scoring": {
            (0, 5): ("–ú–µ–ª–∞–Ω—Ö–æ–ª–∏–∫", "–°–∫–ª–æ–Ω–Ω—ã –∫ —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑—É, —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã, –∑–∞–º–∫–Ω—É—Ç—ã."),
            (6, 10): ("–§–ª–µ–≥–º–∞—Ç–∏–∫", "–°–ø–æ–∫–æ–π–Ω—ã, —É—Ä–∞–≤–Ω–æ–≤–µ—à–µ–Ω–Ω—ã, —Ä–∞—Å—Å—É–¥–∏—Ç–µ–ª—å–Ω—ã."),
            (11, 15): ("–°–∞–Ω–≥–≤–∏–Ω–∏–∫", "–û–±—â–∏—Ç–µ–ª—å–Ω—ã, –∂–∏–≤–æ —Ä–µ–∞–≥–∏—Ä—É—é—Ç –Ω–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–µ–µ."),
            (16, 25): ("–•–æ–ª–µ—Ä–∏–∫", "–ò–º–ø—É–ª—å—Å–∏–≤–Ω—ã, —ç–Ω–µ—Ä–≥–∏—á–Ω—ã, –±—ã—Å—Ç—Ä–æ –≤–æ–∑–±—É–∂–¥–∞—é—Ç—Å—è.")
        }
    },
    "–î–µ–ø—Ä–µ—Å—Å–∏—è (–ë–µ–∫)": {
        "description": "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–µ–ø—Ä–µ—Å—Å–∏–∏.",
        "questions": [
            "–í—ã —á–∞—Å—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—Ç–µ –≥—Ä—É—Å—Ç—å –∏–ª–∏ –ø–æ–¥–∞–≤–ª–µ–Ω–Ω–æ—Å—Ç—å?",
            "–£ –≤–∞—Å —Å–Ω–∏–∂–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å –∫ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏?",
            "–í—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —É—Å—Ç–∞–ª–æ—Å—Ç—å –±–µ–∑ –≤–∏–¥–∏–º–æ–π –ø—Ä–∏—á–∏–Ω—ã?",
            "–í—ã —á–∞—Å—Ç–æ –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç–µ —á—É–≤—Å—Ç–≤–æ –≤–∏–Ω—ã –∏–ª–∏ –Ω–∏–∫—á—ë–º–Ω–æ—Å—Ç–∏?",
            "–í—ã –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–µ–π –≤–Ω–∏–º–∞–Ω–∏—è?"
        ],
        "scoring": {
            (0, 5): ("–ù–µ—Ç –¥–µ–ø—Ä–µ—Å—Å–∏–∏", "–í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ, –≤—ã –≤ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º –±–∞–ª–∞–Ω—Å–µ."),
            (6, 10): ("–õ—ë–≥–∫–∞—è –¥–µ–ø—Ä–µ—Å—Å–∏—è", "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º, –≤–æ–∑–º–æ–∂–Ω–æ —Å—Ç–æ–∏—Ç –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è."),
            (11, 15): ("–£–º–µ—Ä–µ–Ω–Ω–∞—è –¥–µ–ø—Ä–µ—Å—Å–∏—è", "–°–ª–µ–¥—É–µ—Ç –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–º–æ—â—å—é."),
            (16, 25): ("–¢—è–∂—ë–ª–∞—è –¥–µ–ø—Ä–µ—Å—Å–∏—è", "–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç–∞ –∏–ª–∏ –≤—Ä–∞—á–∞.")
        }
    },
    "–ú–æ—Ç–∏–≤–∞—Ü–∏—è": {
        "description": "–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –≤–∞—à–µ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –º–æ—Ç–∏–≤–∞—Ü–∏–∏.",
        "questions": [
            "–í—ã —Å—Ç–∞–≤–∏—Ç–µ —Ü–µ–ª–∏ –∏ —Å–ª–µ–¥—É–µ—Ç–µ –∏–º?",
            "–í—ã –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç–µ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å, –¥–∞–∂–µ –∫–æ–≥–¥–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ç—Ä—É–¥–Ω–æ?",
            "–í—ã –≤–µ—Ä–∏—Ç–µ –≤ —É—Å–ø–µ—Ö —Å–≤–æ–µ–≥–æ –¥–µ–ª–∞?",
            "–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ –æ—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞–±–æ—Ç—ã?",
            "–í—ã –ª–µ–≥–∫–æ –Ω–∞—Ö–æ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—ã –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ø–µ—Ä—ë–¥?"
        ],
        "scoring": {
            (0, 5): ("–ù–∏–∑–∫–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è", "–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã —É—Å—Ç–∞–ª–∏ –∏–ª–∏ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã."),
            (6, 10): ("–°—Ä–µ–¥–Ω—è—è –º–æ—Ç–∏–≤–∞—Ü–∏—è", "–í—ã —Å–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å, –Ω–æ –Ω—É–∂–¥–∞–µ—Ç–µ—Å—å –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è."),
            (11, 15): ("–í—ã—Å–æ–∫–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è", "–í—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –Ω–∞ —É—Å–ø–µ—Ö –∏ –≥–æ—Ç–æ–≤—ã –ø—Ä–µ–æ–¥–æ–ª–µ–≤–∞—Ç—å —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏."),
            (16, 25): ("–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è", "–í—ã –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –∏ –∑–∞—Ä—è–∂–∞–µ—Ç–µ —ç—Ç–∏–º –¥—Ä—É–≥–∏—Ö.")
        }
    },
    "–°—Ç—Ä–µ—Å—Å–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å": {
        "description": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∫–∞–∫ –≤—ã —Å–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º.",
        "questions": [
            "–í—ã —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç–µ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ –≤ –∫—Ä–∏–∑–∏—Å–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö?",
            "–í—ã —É–º–µ–µ—Ç–µ —Ä–∞—Å—Å–ª–∞–±–ª—è—Ç—å—Å—è –ø–æ—Å–ª–µ —Ç—Ä—É–¥–Ω–æ–≥–æ –¥–Ω—è?",
            "–í—ã —Ä–µ–¥–∫–æ —Ç–µ—Ä—è–µ—Ç–µ —Å–∞–º–æ–æ–±–ª–∞–¥–∞–Ω–∏–µ?",
            "–í—ã –Ω–µ —Å–∫–ª–æ–Ω–Ω—ã –∫ –ø–∞–Ω–∏–∫–µ –≤ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö?",
            "–í—ã —É–º–µ–µ—Ç–µ –±—ã—Å—Ç—Ä–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è –ø–æ—Å–ª–µ —Å—Ç—Ä–µ—Å—Å–∞?"
        ],
        "scoring": {
            (0, 5): ("–ù–∏–∑–∫–∞—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ —Å—Ç—Ä–µ—Å—Å—É", "–°–ª–µ–¥—É–µ—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å –Ω–∞–≤—ã–∫–∏ —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–∏."),
            (6, 10): ("–°—Ä–µ–¥–Ω—è—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å", "–í—ã —Å–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å, –Ω–æ –∏–Ω–æ–≥–¥–∞ —Å—Ç—Ä–µ—Å—Å –±–µ—Ä—ë—Ç –≤–µ—Ä—Ö."),
            (11, 15): ("–•–æ—Ä–æ—à–∞—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å", "–í—ã —É–º–µ–µ—Ç–µ –¥–µ—Ä–∂–∞—Ç—å —Å–µ–±—è –≤ —Ä—É–∫–∞—Ö."),
            (16, 25): ("–û—Ç–ª–∏—á–Ω–∞—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å", "–í—ã ‚Äî –ø—Ä–∏–º–µ—Ä —Å—Ç—Ä–µ—Å—Å–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏!")
        }
    },
    "–°–∞–º–æ–æ—Ü–µ–Ω–∫–∞": {
        "description": "–û—Ü–µ–Ω–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –≤–∞—à–µ–π —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏.",
        "questions": [
            "–í—ã –¥–æ–≤–æ–ª—å–Ω—ã —Å–æ–±–æ–π –∏ —Å–≤–æ–∏–º–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏?",
            "–í—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–±—è –¥–æ—Å—Ç–æ–π–Ω—ã–º —É–≤–∞–∂–µ–Ω–∏—è?",
            "–í—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —Å–µ–±—è —Ç–∞–∫–∏–º, –∫–∞–∫–æ–π –≤—ã –µ—Å—Ç—å?",
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã –≤ —Å–≤–æ–∏—Ö —Å–∏–ª–∞—Ö?",
            "–í—ã –Ω–µ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç–µ —Å–µ–±—è —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ?"
        ],
        "scoring": {
            (0, 5): ("–ù–∏–∑–∫–∞—è —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞", "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é –≤ —Å–µ–±–µ."),
            (6, 10): ("–°—Ä–µ–¥–Ω—è—è —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞", "–í—ã –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É–≤–µ—Ä–µ–Ω—ã, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è —Ä–æ—Å—Ç–∞."),
            (11, 15): ("–í—ã—Å–æ–∫–∞—è —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞", "–í—ã —É–≤–µ—Ä–µ–Ω—ã –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —Å–µ–±—è."),
            (16, 25): ("–ó–∞–≤—ã—à–µ–Ω–Ω–∞—è —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞", "–û—Ü–µ–Ω–∏–≤–∞–π—Ç–µ —Å–µ–±—è —Ç—Ä–µ–∑–≤–æ –∏ —á–µ—Å—Ç–Ω–æ.")
        }
    }
}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@bot.message_handler(commands=['start'])
def handle_start(message):
    db.add_user(message.from_user)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üß† –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text == "üß† –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç")
def handle_tests(message):
    markup = types.InlineKeyboardMarkup()
    for name in TESTS:
        markup.add(types.InlineKeyboardButton(name, callback_data=f"test_{name}"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('test_'))
def start_test(call):
    test_name = call.data[5:]
    user_tests[call.from_user.id] = {
        'name': test_name,
        'current': 0,
        'answers': []
    }
    send_question(call.from_user.id, call.message.chat.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('ans_'))
def handle_answer(call):
    answer = int(call.data[4:])
    user_id = call.from_user.id
    user_tests[user_id]['answers'].append(answer)
    user_tests[user_id]['current'] += 1
    send_question(user_id, call.message.chat.id)

def send_question(user_id, chat_id):
    test = user_tests[user_id]
    test_data = TESTS[test['name']]

    if test['current'] >= len(test_data['questions']):
        finish_test(user_id, chat_id)
        return

    question = test_data['questions'][test['current']]
    markup = types.InlineKeyboardMarkup()
    for i, label in enumerate(["–ù–∏–∫–æ–≥–¥–∞", "–†–µ–¥–∫–æ", "–ò–Ω–æ–≥–¥–∞", "–ß–∞—Å—Ç–æ", "–í—Å–µ–≥–¥–∞"], 1):
        markup.add(types.InlineKeyboardButton(label, callback_data=f"ans_{i}"))

    bot.send_message(chat_id, f"{question}", reply_markup=markup)

def finish_test(user_id, chat_id):
    test = user_tests[user_id]
    total = sum(test['answers'])
    scoring = TESTS[test['name']]['scoring']
    for rng, (result, interp) in scoring.items():
        if rng[0] <= total <= rng[1]:
            db.save_result(user_id, test['name'], total, result, interp)
            bot.send_message(chat_id, f"\U0001F4CA –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞: <b>{test['name']}</b>\n\n<b>{result}</b>\n{interp}", parse_mode='HTML')
            break
    del user_tests[user_id]

@bot.message_handler(func=lambda m: m.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
def profile(message):
    user = db.get_user(message.from_user.id)
    results = db.get_results(message.from_user.id)
    text = f"<b>–ü—Ä–æ—Ñ–∏–ª—å:</b>\n–ò–º—è: {user['first_name']}\n–Æ–∑–µ—Ä–Ω–µ–π–º: @{user['username']}\n\n<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:</b>\n"
    for res in results:
        text += f"\n<b>{res['test_name']}</b> ‚Äî {res['result']}\n{res['interpretation']}\n–î–∞—Ç–∞: {res['test_date']}\n"
    bot.send_message(message.chat.id, text, parse_mode='HTML')

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    while True:
        try:
            logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
            bot.polling(none_stop=True)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ polling: {e}")
            time.sleep(5)
